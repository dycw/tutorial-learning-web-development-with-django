[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 80
skip-magic-trailing-comma = true
target-version = ["py310"]

[tool.isort]
atomic = true
float_to_top = true
force_single_line = true
line_length = 80
lines_after_imports = 2
profile = "black"
remove_redundant_aliases = true
skip_gitignore = true
src_paths = "src"
virtual_env = ".venv/bin/python"

[tool.poetry]
name = "django-learning"
version = "0.0.16"
description = "Learning the Django framework"
authors = ["Derek Wan <d.wan@icloud.com>"]
license = "MIT"

[tool.poetry.dependencies]
python = "^3.10"
beartype = "^0.10.4"
django = "^4.0.4"
pillow = "^9.1.0"

[tool.poetry.dev-dependencies]
black = "^22.3"
click = "^8.0"
django-stubs = "^1.10"
flake8 = "^4.0"
hypothesis = "^6.43"
ipython = "^8.2"
isort = "^5.10"
jupyterlab = "^3.3"
jupyterlab-vim = "^0.15"
pdbpp = "^0.10"
pre-commit = "^2.18"
pyclean = "^2.0"
pytest = "^7.1"
rich = "^12.2"
# flake8 extensions
flake8-absolute-import = "^1.0"
flake8-annotations = "^2.8"
flake8-assertive = "^2.1"
flake8-bandit = "^3.0"
flake8-bugbear = "^22.3"
flake8-builtins = "^1.5"
flake8-comprehensions = "^3.8"
flake8-debugger = "^4.0"
flake8-eradicate = "^1.2"
flake8-executable = "^2.1"
flake8-no-pep420 = "^2.1"
flake8-pie = "^0.15"
flake8-print = "^4.0"
flake8-simplify = "^0.19"
flake8-unused-arguments = "^0.0"
flake8-variables-names = "^0.0"
pep8-naming = "^0.12"
# pytest extensions
pytest-django = "^4.5"
pytest-instafail = "^0.4"
pytest-randomly = "^3.8"
pytest-xdist = "^2.3"

[tool.pytest.ini_options]
addopts = ["-rsxX", "--color=auto", "--strict-markers"]
filterwarnings = ["error", "ignore::DeprecationWarning"]
minversion = "7.0"
python_files = ["tests.py", "test_*.py", "*_tests.py"]
testpaths = "src/tests"
xfail_strict = true
looponfailroots = "src"
DJANGO_SETTINGS_MODULE = "mysite.settings"

[tool.pyright]
include = ["src"]
exclude = ["**/migrations/**", "**/tests.py"]
venvPath = ".venv"
pythonVersion = "3.10"
pythonPlatform = "Linux"
executionEnvironments = [{ root = "src" }]
typeCheckingMode = "strict"
reportMissingModuleSource = "error"
reportMissingTypeStubs = false
reportUnknownArgumentType = false
reportUnknownMemberType = false
reportUnknownVariableType = false
reportCallInDefaultInitializer = "error"
reportImplicitStringConcatenation = "error"
reportMissingSuperCall = "error"
reportPropertyTypeMismatch = "error"
reportUninitializedInstanceVariable = "error"
reportUnnecessaryTypeIgnoreComment = "error"
reportUnusedCallResult = "error"
